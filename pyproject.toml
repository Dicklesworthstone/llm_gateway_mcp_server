[build-system]
requires = ["hatchling", "torch"]
build-backend = "hatchling.build"

[project]
name = "ultimate_mcp_server"
version = "0.1.0"
description = "The Ultimate Model Context Protocol (MCP) Server, providing unified access to a wide variety of useful and powerful tools."
readme = "README.md"
requires-python = ">=3.13"
license = {file = "LICENSE"}
authors = [
    {name = "Jeffrey Emanuel", email = "jeffrey.emanuel@gmail.com"},
]
maintainers = [
    {name = "Jeffrey Emanuel", email = "jeffrey.emanuel@gmail.com"},
]
keywords = ["ultimte", "mcp", "server", "agent", "ai", "claude", "gpt", "gemini", "deepseek"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core MCP and LLM providers
    "mcp",
    "anthropic",
    "openai",
    "google-genai",

    # Async utilities
    "httpx",
    "aiofiles",
    "asyncio",

    # Data processing
    "pydantic",
    "tenacity",  # For retry logic

    # Caching and persistence
    "diskcache", # Persistent disk cache
    "msgpack",   # Efficient serialization

    # Vector database for semantic caching
    "numpy",
    "sentence-transformers",  # For embeddings
    "chromadb",              # Vector DB
    
    # Analytics and monitoring
    "prometheus-client",
    "pandas",
    "rich",    # Console output formatting
    
    # Templating for prompt management
    "jinja2",
    
    # Multi-modal support
    "pillow",  # Image processing
    
    # Utilities
    "python-slugify",  # For URL-friendly strings
    "colorama",        # Terminal colors
    "tqdm",           # Progress bars
    "tiktoken",       # Token counting
    "python-decouple", # .env management
    "pydantic-settings",
    "jsonschema",
    "matplotlib",
    "marqo", # Added for Marqo search tool
    "pytest-playwright", # For web browser automation
    "sqlalchemy", # For SQL database interactions
    "aiosqlite", # Async SQLite database access
    "pyvis", # Graph visualization
    "python-docx", # MS Word DOCX support
    "opencv-python", # For OCR tools
    "pillow", # For OCR
    "pytesseract", # For OCR
    "pdf2image", # For OCR
    "pdfplumber", # For OCR
    "fitz", # For OCR
    "pymupdf", # For OCR
    "beautifulsoup4", # Dealing with HTML
    "xmldiff", # for redlines
    "lxml", # XML parser
    "faster-whisper", # Audio transcripts
    "html2text",
    "readability-lxml",
    "markdownify",
    "trafilatura",
    "markdown",
    "jsonschema",
    "jsonpatch",
    "jsonpointer",    
    "pygments",
    "typer",  # For CLI interface
    "docling", # For document conversion
    "aiohttp",
]

[project.optional-dependencies]
# Advanced AI model libraries
advanced = [
    # PyTorch and core dependencies must be first
    "torch",             # PyTorch for transformers
    "torchvision",
    "torchaudio",
    # Other dependencies that require PyTorch
    "transformers",     # For Hugging Face models
    "flash-attn",
    "accelerate",       # For optimized model inference
]

#excel_automation = [
#    "win32com", # Excel automation,
#    "win32com",
#]

# Development and testing
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "isort",
    "mypy",
    "ruff",
    "types-aiofiles",
    "pre-commit",
]

# Documentation
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocstrings-python",
]

# All extras
all = ["ultimate_mcp_server[advanced,dev,docs]"]

[project.urls]
Homepage = "https://github.com/Dicklesworthstone/ultimate_mcp_server"
Documentation = "https://github.com/Dicklesworthstone/ultimate_mcp_server/docs"
Repository = "https://github.com/Dicklesworthstone/ultimate_mcp_server.git"
"Bug Reports" = "https://github.com/Dicklesworthstone/ultimate_mcp_server/issues"

[project.scripts]
umcp = "ultimate_mcp_server.cli.typer_cli:cli"

[tool.hatch.version]
path = "ultimate_mcp_server/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/ultimate_mcp_server",
    "/examples",
    "/tests",
    "LICENSE",
    "README.md",
    "pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["ultimate_mcp_server"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov=ultimate_mcp_server --cov-report=term-missing -v"
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "Q"]
ignore = ["E203", "E501", "Q000"]
